import random
import pytest
import numpy as np
from tvu.decimal_value import Dn


class TestDecimalNumber_constructor:
    """Test DecimalNumber.__init__"""

    def __test___init__(self, key, arg, params, _str_, _repr_):
        s, x, e = params
        dn = Dn(arg)
        assert dn.s == s
        assert dn.x == x
        assert dn.e == e
        assert str(dn) == _str_
        assert repr(dn) == _repr_

    @pytest.mark.parametrize('key, arg, params, _str_, _repr_', [
        ('int(0)', 0, (0, 0, 0), '0e0', 'DecimalNumber(0e0)'),
        ('float(0)', 0.0, (0, 0, 0), '0e0', 'DecimalNumber(0e0)'),
        ('np.int16(0)', np.int16(0), (0, 0, 0), '0e0', 'DecimalNumber(0e0)'),
        ('np.int32(0)', np.int32(0), (0, 0, 0), '0e0', 'DecimalNumber(0e0)'),
        ('np.int64(0)', np.int64(0), (0, 0, 0), '0e0', 'DecimalNumber(0e0)'),
    ])
    def test___init___zero(self, key, arg, params, _str_, _repr_): self.__test___init__(key, arg, params, _str_, _repr_)

    @pytest.mark.parametrize('key, arg, params, _str_, _repr_', [
        ('int(0)', 0, (0, 0, 0), '0e0', 'DecimalNumber(0e0)'),
        ('int(1)', 1, (1, 1, 0), '1e0', 'DecimalNumber(1e0)'),
        ('int(-1)', -1, (-1, 1, 0), '-1e0', 'DecimalNumber(-1e0)'),
        ('int(123)', 123, (1, 123, 0), '123e0', 'DecimalNumber(123e0)'),
        ('int(-123)', -123, (-1, 123, 0), '-123e0', 'DecimalNumber(-123e0)'),
        ('int(1234567890)', 1234567890, (1, 123456789, 1), '123456789e1', 'DecimalNumber(123456789e1)'),
        ('int(-1234567890)', -1234567890, (-1, 123456789, 1), '-123456789e1', 'DecimalNumber(-123456789e1)'),
        ('int(1000000000)', 1000000000, (1, 1, 9), '1e9', 'DecimalNumber(1e9)'),
        ('int(-1000000000)', -1000000000, (-1, 1, 9), '-1e9', 'DecimalNumber(-1e9)'),
        ('int(1000000000000000000)', 1000000000000000000, (1, 1, 18), '1e18', 'DecimalNumber(1e18)'),
        ('int(-1000000000000000000)', -1000000000000000000, (-1, 1, 18), '-1e18', 'DecimalNumber(-1e18)'),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890,
         (1, 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789, 1), '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789e1', 'DecimalNumber(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789e1)'),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890,
         (-1, 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789, 1), '-12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789e1', 'DecimalNumber(-12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789e1)'),
    ])
    def test___init___int(self, key, arg, params, _str_, _repr_): self.__test___init__(key, arg, params, _str_, _repr_)

    @pytest.mark.parametrize('key, arg, params, _str_, _repr_', [
        ('float(0)', 0.0, (0, 0, 0), '0e0', 'DecimalNumber(0e0)'),
        ('float(1)', 1.0, (1, 10, -1), '10e-1', 'DecimalNumber(10e-1)'),
        ('float(-1)', -1.0, (-1, 10, -1), '-10e-1', 'DecimalNumber(-10e-1)'),
        ('float(123)', 123.0, (1, 1230, -1), '1230e-1', 'DecimalNumber(1230e-1)'),
        ('float(-123)', -123.0, (-1, 1230, -1), '-1230e-1', 'DecimalNumber(-1230e-1)'),
        ('float(12.3)', 12.3, (1, 123, -1), '123e-1', 'DecimalNumber(123e-1)'),
        ('float(-12.3)', -12.3, (-1, 123, -1), '-123e-1', 'DecimalNumber(-123e-1)'),
        ('float(12345.67890)', 12345.67890, (1, 123456789, -4), '123456789e-4', 'DecimalNumber(123456789e-4)'),
        ('float(-12345.67890)', -12345.67890, (-1, 123456789, -4), '-123456789e-4', 'DecimalNumber(-123456789e-4)'),
        # The following tests will fail because of overflow in the float constructor.
        # [Task]: Make the following tests pass by using string representation of the float.
        # ('float(1234567890.1234567890)', 1234567890.1234567890, (1, 1234567890123456789, -9), '1234567890123456789e-9', 'DecimalNumber(1234567890123456789e-9)'),
        # ('float(-1234567890.1234567890)', -1234567890.1234567890, (-1, 1234567890123456789, -9), '-1234567890123456789e-9', 'DecimalNumber(-1234567890123456789e-9)'),
        # ('float(1234567890.12345678901234567890123456789012345678901234567890123456789012345678901234567890)', 1234567890.12345678901234567890123456789012345678901234567890123456789012345678901234567890,
        #     (1, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -50), '123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890e-50', 'DecimalNumber(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890e-50)'),
        # ('float(-1234567890.12345678901234567890123456789012345678901234567890123456789012345678901234567890)', -1234567890.12345678901234567890123456789012345678901234567890123456789012345678901234567890,
        #     (-1, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -50), '-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890e-50', 'DecimalNumber(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890e-50)'),
    ])
    def test___init___float(self, key, arg, params, _str_, _repr_): self.__test___init__(key, arg, params, _str_, _repr_)

    @pytest.mark.parametrize('key, invalid_arg, expected_exception', [
        # ('"1.2"', "1.2", TypeError), # Added support for str in DecimalNumber.__init__
        ('1.2j', 1.2j, TypeError),
        ('[1.2]', [1.2], TypeError),
        ('(1.2,)', (1.2,), TypeError),
        ('{1.2}', {1.2}, TypeError),
        ('{1.2: 1.2}', {1.2: 1.2}, TypeError),
        ('np.array([1.2])', np.array([1.2]), TypeError),
        ('np.float64(1.2)', np.float64(1.2), TypeError),
    ])
    def test___init___raise(self, key, invalid_arg, expected_exception):
        with pytest.raises(expected_exception): Dn(invalid_arg)


class TestDecimalNumber___eq__:
    """Test DecimalNumber.__eq__()."""

    def __test___eq__(self, key, arg): assert Dn(arg) == Dn(arg)

    @pytest.mark.parametrize('key, arg', [
        ('int(0)', 0),
        ('float(0)', 0.0),
        ('np.int16(0)', np.int16(0)),
        ('np.int32(0)', np.int32(0)),
        ('np.int64(0)', np.int64(0)),
    ])
    def test___eq___zero(self, key, arg): self.__test___eq__(key, arg)

    @pytest.mark.parametrize('key, arg', [
        ('int(0)', 0),
        ('int(1)', 1),
        ('int(-1)', -1),
        ('int(123)', 123),
        ('int(-123)', -123),
        ('int(1234567890)', 1234567890),
        ('int(-1234567890)', -1234567890),
        ('int(1000000000)', 1000000000),
        ('int(-1000000000)', -1000000000),
        ('int(1000000000000000000)', 1000000000000000000),
        ('int(-1000000000000000000)', -1000000000000000000),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890),
    ])
    def test___eq___int(self, key, arg): self.__test___eq__(key, arg)

    @pytest.mark.parametrize('key, arg', [
        ('float(0)', 0.0),
        ('float(1)', 1.0),
        ('float(-1)', -1.0),
        ('float(123)', 123.0),
        ('float(-123)', -123.0),
        ('float(12.3)', 12.3),
        ('float(-12.3)', -12.3),
        ('float(12345.67890)', 12345.67890),
        ('float(-12345.67890)', -12345.67890),
    ])
    def test___eq___float(self, key, arg): self.__test___eq__(key, arg)


class TestDecimalNumber___ne__:
    """Test DecimalNumber.__ne__()."""

    def __test___ne__(self, key, arg1, arg2): assert Dn(arg1) != Dn(arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('float(0)', 0.0, 1.0),
        ('np.int16(0)', np.int16(0), np.int16(1)),
        ('np.int32(0)', np.int32(0), np.int32(1)),
        ('np.int64(0)', np.int64(0), np.int64(1)),
    ])
    def test___ne___zero(self, key, arg1, arg2): self.__test___ne__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('int(1)', 1, 2),
        ('int(-1)', -1, 0),
        ('int(123)', 123, 124),
        ('int(-123)', -123, -122),
        ('int(1234567890)', 1234567890, 1234567891),
        ('int(-1234567890)', -1234567890, -1234567889),
        ('int(1000000000)', 1000000000, 1000000001),
        ('int(-1000000000)', -1000000000, -999999999),
        ('int(1000000000000000000)', 1000000000000000000, 1000000000000000001),
        ('int(-1000000000000000000)', -1000000000000000000, -999999999999999999),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889),
    ])
    def test___ne___int(self, key, arg1, arg2): self.__test___ne__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('float(0)', 0.0, 1.0),
        ('float(1)', 1.0, 2.0),
        ('float(-1)', -1.0, 0.0),
        ('float(123)', 123.0, 124.0),
        ('float(-123)', -123.0, -122.0),
        ('float(12.3)', 12.3, 12.4),
        ('float(-12.3)', -12.3, -12.2),
        ('float(12345.67890)', 12345.67890, 12345.67891),
        ('float(-12345.67890)', -12345.67890, -12345.67889),
    ])
    def test___ne___float(self, key, arg1, arg2): self.__test___ne__(key, arg1, arg2)


class TestDecimalNumber___lt__:
    """Test DecimalNumber.__lt__()."""

    def __test___lt__(self, key, arg1, arg2): assert Dn(arg1) < Dn(arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('float(0)', 0.0, 1.0),
        ('np.int16(0)', np.int16(0), np.int16(1)),
        ('np.int32(0)', np.int32(0), np.int32(1)),
        ('np.int64(0)', np.int64(0), np.int64(1)),
    ])
    def test___lt___zero(self, key, arg1, arg2): self.__test___lt__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('int(1)', 1, 2),
        ('int(-1)', -1, 0),
        ('int(123)', 123, 124),
        ('int(-123)', -123, -122),
        ('int(1234567890)', 1234567890, 1234567891),
        ('int(-1234567890)', -1234567890, -1234567889),
        ('int(1000000000)', 1000000000, 1000000001),
        ('int(-1000000000)', -1000000000, -999999999),
        ('int(1000000000000000000)', 1000000000000000000, 1000000000000000001),
        ('int(-1000000000000000000)', -1000000000000000000, -999999999999999999),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889),
    ])
    def test___lt___int(self, key, arg1, arg2): self.__test___lt__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('float(0)', 0.0, 1.0),
        ('float(1)', 1.0, 2.0),
        ('float(-1)', -1.0, 0.0),
        ('float(123)', 123.0, 124.0),
        ('float(-123)', -123.0, -122.0),
        ('float(12.3)', 12.3, 12.4),
        ('float(-12.3)', -12.3, -12.2),
        ('float(12345.67890)', 12345.67890, 12345.67891),
        ('float(-12345.67890)', -12345.67890, -12345.67889),
    ])
    def test___lt___float(self, key, arg1, arg2): self.__test___lt__(key, arg1, arg2)


class TestDecimalNumber___le__:
    """Test DecimalNumber.__le__()."""

    def __test___le__(self, key, arg1, arg2): assert Dn(arg1) <= Dn(arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('float(0)', 0.0, 1.0),
        ('np.int16(0)', np.int16(0), np.int16(1)),
        ('np.int32(0)', np.int32(0), np.int32(1)),
        ('np.int64(0)', np.int64(0), np.int64(1)),
    ])
    def test___le___zero(self, key, arg1, arg2): self.__test___le__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('int(1)', 1, 2),
        ('int(-1)', -1, 0),
        ('int(123)', 123, 124),
        ('int(-123)', -123, -122),
        ('int(1234567890)', 1234567890, 1234567891),
        ('int(-1234567890)', -1234567890, -1234567889),
        ('int(1000000000)', 1000000000, 1000000001),
        ('int(-1000000000)', -1000000000, -999999999),
        ('int(1000000000000000000)', 1000000000000000000, 1000000000000000001),
        ('int(-1000000000000000000)', -1000000000000000000, -999999999999999999),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889),
    ])
    def test___le___int(self, key, arg1, arg2): self.__test___le__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('float(0)', 0.0, 1.0),
        ('float(1)', 1.0, 2.0),
        ('float(-1)', -1.0, 0.0),
        ('float(123)', 123.0, 124.0),
        ('float(-123)', -123.0, -122.0),
        ('float(12.3)', 12.3, 12.4),
        ('float(-12.3)', -12.3, -12.2),
        ('float(12345.67890)', 12345.67890, 12345.67891),
        ('float(-12345.67890)', -12345.67890, -12345.67889),
    ])
    def test___le___float(self, key, arg1, arg2): self.__test___le__(key, arg1, arg2)


class TestDecimalNumber___gt__:
    """Test DecimalNumber.__gt__()."""

    def __test___gt__(self, key, arg1, arg2): assert Dn(arg1) > Dn(arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('float(0)', 0.0, 1.0),
        ('np.int16(0)', np.int16(0), np.int16(1)),
        ('np.int32(0)', np.int32(0), np.int32(1)),
        ('np.int64(0)', np.int64(0), np.int64(1)),
    ])
    def test___gt___zero(self, key, arg1, arg2): self.__test___gt__(key, arg2, arg1)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('int(1)', 1, 2),
        ('int(-1)', -1, 0),
        ('int(123)', 123, 124),
        ('int(-123)', -123, -122),
        ('int(1234567890)', 1234567890, 1234567891),
        ('int(-1234567890)', -1234567890, -1234567889),
        ('int(1000000000)', 1000000000, 1000000001),
        ('int(-1000000000)', -1000000000, -999999999),
        ('int(1000000000000000000)', 1000000000000000000, 1000000000000000001),
        ('int(-1000000000000000000)', -1000000000000000000, -999999999999999999),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889),
    ])
    def test___gt___int(self, key, arg1, arg2): self.__test___gt__(key, arg2, arg1)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('float(0)', 0.0, 1.0),
        ('float(1)', 1.0, 2.0),
        ('float(-1)', -1.0, 0.0),
        ('float(123)', 123.0, 124.0),
        ('float(-123)', -123.0, -122.0),
        ('float(12.3)', 12.3, 12.4),
        ('float(-12.3)', -12.3, -12.2),
        ('float(12345.67890)', 12345.67890, 12345.67891),
        ('float(-12345.67890)', -12345.67890, -12345.67889),
    ])
    def test___gt___float(self, key, arg1, arg2): self.__test___gt__(key, arg2, arg1)


class TestDecimalNumber___ge__:
    """Test DecimalNumber.__ge__()."""

    def __test___ge__(self, key, arg1, arg2): assert Dn(arg1) >= Dn(arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('float(0)', 0.0, 1.0),
        ('np.int16(0)', np.int16(0), np.int16(1)),
        ('np.int32(0)', np.int32(0), np.int32(1)),
        ('np.int64(0)', np.int64(0), np.int64(1)),
    ])
    def test___ge___zero(self, key, arg1, arg2): self.__test___ge__(key, arg2, arg1)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, 1),
        ('int(1)', 1, 2),
        ('int(-1)', -1, 0),
        ('int(123)', 123, 124),
        ('int(-123)', -123, -122),
        ('int(1234567890)', 1234567890, 1234567891),
        ('int(-1234567890)', -1234567890, -1234567889),
        ('int(1000000000)', 1000000000, 1000000001),
        ('int(-1000000000)', -1000000000, -999999999),
        ('int(1000000000000000000)', 1000000000000000000, 1000000000000000001),
        ('int(-1000000000000000000)', -1000000000000000000, -999999999999999999),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567889),
    ])
    def test___ge___int(self, key, arg1, arg2): self.__test___ge__(key, arg2, arg1)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('float(0)', 0.0, 1.0),
        ('float(1)', 1.0, 2.0),
        ('float(-1)', -1.0, 0.0),
        ('float(123)', 123.0, 124.0),
        ('float(-123)', -123.0, -122.0),
        ('float(12.3)', 12.3, 12.4),
        ('float(-12.3)', -12.3, -12.2),
        ('float(12345.67890)', 12345.67890, 12345.67891),
        ('float(-12345.67890)', -12345.67890, -12345.67889),
    ])
    def test___ge___float(self, key, arg1, arg2): self.__test___ge__(key, arg2, arg1)


class TestDecimalNumber___abs__:
    """Test DecimalNumber.__abs__()."""

    def __test___abs__(self, key, arg1, arg2): assert abs(Dn(arg1)) == abs(Dn(arg2))

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, -0),
        ('float(0)', 0.0, -0.0),
        ('np.int16(0)', np.int16(0), np.int16(-0)),
        ('np.int32(0)', np.int32(0), np.int32(-0)),
        ('np.int64(0)', np.int64(0), np.int64(-0)),
    ])
    def test___abs___zero(self, key, arg1, arg2): self.__test___abs__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(0)', 0, -0),
        ('int(1)', 1, -1),
        ('int(-1)', -1, 1),
        ('int(123)', 123, -123),
        ('int(-123)', -123, 123),
        ('int(1234567890)', 1234567890, -1234567890),
        ('int(-1234567890)', -1234567890, 1234567890),
        ('int(1000000000)', 1000000000, -1000000000),
        ('int(-1000000000)', -1000000000, 1000000000),
        ('int(1000000000000000000)', 1000000000000000000, -1000000000000000000),
        ('int(-1000000000000000000)', -1000000000000000000, 1000000000000000000),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890),
    ])
    def test___abs___int(self, key, arg1, arg2): self.__test___abs__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('float(0)', 0.0, -0.0),
        ('float(1)', 1.0, -1.0),
        ('float(-1)', -1.0, 1.0),
        ('float(123)', 123.0, -123.0),
        ('float(-123)', -123.0, 123.0),
        ('float(12.3)', 12.3, -12.3),
        ('float(-12.3)', -12.3, 12.3),
        ('float(12345.67890)', 12345.67890, -12345.67890),
        ('float(-12345.67890)', -12345.67890, 12345.67890),
    ])
    def test___abs___float(self, key, arg1, arg2): self.__test___abs__(key, arg1, arg2)


class TestDecimalNumber___add__:
    """Test DecimalNumber.__add__()."""

    def __test___add__(self, key, arg1, arg2, arg3): assert Dn(arg1) + Dn(arg2) == Dn(arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(0) + int(0)', 0, 0, 0),
        ('float(0) + float(0)', 0.0, 0.0, 0.0),
        ('np.int16(0) + np.int16(0)', np.int16(0), np.int16(0), np.int16(0)),
        ('np.int32(0) + np.int32(0)', np.int32(0), np.int32(0), np.int32(0)),
        ('np.int64(0) + np.int64(0)', np.int64(0), np.int64(0), np.int64(0)),
    ])
    def test___add___zero(self, key, arg1, arg2, arg3): self.__test___add__(key, arg1, arg2, arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(0) + int(0)', 0, 0, 0),
        ('int(1) + int(0)', 1, 0, 1),
        ('int(0) + int(1)', 0, 1, 1),
        ('int(1) + int(1)', 1, 1, 2),
        ('int(123) + int(321)', 123, 321, 444),
        ('int(-123) + int(321)', -123, 321, 198),
        ('int(123) + int(-321)', 123, -321, -198),
        ('int(-123) + int(-321)', -123, -321, -444),
        ('int(1234567890) + int(1234567890)', 1234567890, 1234567890, 2469135780),
        ('int(-1234567890) + int(1234567890)', -1234567890, 1234567890, 0),
        ('int(1234567890) + int(-1234567890)', 1234567890, -1234567890, 0),
        ('int(-1234567890) + int(-1234567890)', -1234567890, -1234567890, -2469135780),
        ('int(1000000000) + int(1000000000)', 1000000000, 1000000000, 2000000000),
        ('int(-1000000000) + int(1000000000)', -1000000000, 1000000000, 0),
        ('int(1000000000) + int(-1000000000)', 1000000000, -1000000000, 0),
        ('int(-1000000000) + int(-1000000000)', -1000000000, -1000000000, -2000000000),
        ('int(1000000000000000000) + int(1000000000000000000)', 1000000000000000000, 1000000000000000000, 2000000000000000000),
        ('int(-1000000000000000000) + int(1000000000000000000)', -1000000000000000000, 1000000000000000000, 0),
        ('int(1000000000000000000) + int(-1000000000000000000)', 1000000000000000000, -1000000000000000000, 0),
        ('int(-1000000000000000000) + int(-1000000000000000000)', -1000000000000000000, -1000000000000000000, -2000000000000000000),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) + int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)',
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 246913578024691357802469135780246913578024691357802469135780246913578024691357802469135780),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) + int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 0),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) + int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)',
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 0),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) + int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -246913578024691357802469135780246913578024691357802469135780246913578024691357802469135780),
    ])
    def test___add___int(self, key, arg1, arg2, arg3): self.__test___add__(key, arg1, arg2, arg3)


class TestDecimalNumber___sub__:
    """Test DecimalNumber.__sub__"""

    def __test___sub__(self, key, arg1, arg2, arg3): assert Dn(arg1) - Dn(arg2) == Dn(arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(0) - int(0)', 0, 0, 0),
        ('float(0) - float(0)', 0.0, 0.0, 0.0),
        ('np.int16(0) - np.int16(0)', np.int16(0), np.int16(0), np.int16(0)),
        ('np.int32(0) - np.int32(0)', np.int32(0), np.int32(0), np.int32(0)),
        ('np.int64(0) - np.int64(0)', np.int64(0), np.int64(0), np.int64(0)),
    ])
    def test___sub___zero(self, key, arg1, arg2, arg3): self.__test___sub__(key, arg1, arg2, arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(0) - int(0)', 0, 0, 0),
        ('int(1) - int(0)', 1, 0, 1),
        ('int(0) - int(1)', 0, 1, -1),
        ('int(1) - int(1)', 1, 1, 0),
        ('int(123) - int(321)', 123, 321, -198),
        ('int(-123) - int(321)', -123, 321, -444),
        ('int(123) - int(-321)', 123, -321, 444),
        ('int(-123) - int(-321)', -123, -321, 198),
        ('int(1234567890) - int(1234567890)', 1234567890, 1234567890, 0),
        ('int(-1234567890) - int(1234567890)', -1234567890, 1234567890, -2469135780),
        ('int(1234567890) - int(-1234567890)', 1234567890, -1234567890, 2469135780),
        ('int(-1234567890) - int(-1234567890)', -1234567890, -1234567890, 0),
        ('int(1000000000) - int(1000000000)', 1000000000, 1000000000, 0),
        ('int(-1000000000) - int(1000000000)', -1000000000, 1000000000, -2000000000),
        ('int(1000000000) - int(-1000000000)', 1000000000, -1000000000, 2000000000),
        ('int(-1000000000) - int(-1000000000)', -1000000000, -1000000000, 0),
        ('int(1000000000000000000) - int(1000000000000000000)', 1000000000000000000, 1000000000000000000, 0),
        ('int(-1000000000000000000) - int(1000000000000000000)', -1000000000000000000, 1000000000000000000, -2000000000000000000),
        ('int(1000000000000000000) - int(-1000000000000000000)', 1000000000000000000, -1000000000000000000, 2000000000000000000),
        ('int(-1000000000000000000) - int(-1000000000000000000)', -1000000000000000000, -1000000000000000000, 0),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) - int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)',
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 0),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) - int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -246913578024691357802469135780246913578024691357802469135780246913578024691357802469135780),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) - int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)',
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 246913578024691357802469135780246913578024691357802469135780246913578024691357802469135780),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) - int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 0),
    ])
    def test___sub___int(self, key, arg1, arg2, arg3): self.__test___sub__(key, arg1, arg2, arg3)


class TestDecimalNumber___mul__:
    """Test DecimalNumber.__mul__"""

    def __test___mul__(self, key, arg1, arg2, arg3): assert Dn(arg1) * Dn(arg2) == Dn(arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(0) * int(0)', 0, 0, 0),
        ('float(0) * float(0)', 0.0, 0.0, 0.0),
        ('np.int16(0) * np.int16(0)', np.int16(0), np.int16(0), np.int16(0)),
        ('np.int32(0) * np.int32(0)', np.int32(0), np.int32(0), np.int32(0)),
        ('np.int64(0) * np.int64(0)', np.int64(0), np.int64(0), np.int64(0)),
    ])
    def test___mul___zero(self, key, arg1, arg2, arg3): self.__test___mul__(key, arg1, arg2, arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(0) * int(0)', 0, 0, 0),
        ('int(1) * int(0)', 1, 0, 0),
        ('int(0) * int(1)', 0, 1, 0),
        ('int(1) * int(1)', 1, 1, 1),
        ('int(123) * int(321)', 123, 321, 123 * 321),
        ('int(-123) * int(321)', -123, 321, -123 * 321),
        ('int(123) * int(-321)', 123, -321, 123 * -321),
        ('int(-123) * int(-321)', -123, -321, -123 * -321),
        ('int(1000000000000000000) * int(1000000000000000000)', 1000000000000000000, 1000000000000000000, 1000000000000000000 * 1000000000000000000),
        ('int(-1000000000000000000) * int(1000000000000000000)', -1000000000000000000, 1000000000000000000, -1000000000000000000 * 1000000000000000000),
        ('int(1000000000000000000) * int(-1000000000000000000)', 1000000000000000000, -1000000000000000000, 1000000000000000000 * -1000000000000000000),
        ('int(-1000000000000000000) * int(-1000000000000000000)', -1000000000000000000, -1000000000000000000, -1000000000000000000 * -1000000000000000000),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) * int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890,
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 * 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) * int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890,
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 * 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890),
        ('int(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) * int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 * -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890),
        ('int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) * int(-123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)', -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -
         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890, -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890 * -123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890),
    ])
    def test___mul___int(self, key, arg1, arg2, arg3): self.__test___mul__(key, arg1, arg2, arg3)


class TestDecimalNumber___truediv__:
    """Test class for DecimalNumber.__truediv__"""

    def __test___truediv__(self, key, arg1, arg2, arg3): assert Dn(arg1) / Dn(arg2) == Dn(arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(0) / int(1)', 0, 1, 0),
        ('float(0.0) / float(1.0)', 0.0, 1.0, 0.0),
        ('np.int16(0) / np.int16(1)', np.int16(0), np.int16(1), np.int16(0)),
        ('np.int32(0) / np.int32(1)', np.int32(0), np.int32(1), np.int32(0)),
        ('np.int64(0) / np.int64(1)', np.int64(0), np.int64(1), np.int64(0)),
    ])
    def test___truediv___zero(self, key, arg1, arg2, arg3): self.__test___truediv__(key, arg1, arg2, arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(1) / int(1)', 1, 1, 1 / 1),
        ('int(1) / int(2)', 1, 2, 1 / 2),
        ('int(2) / int(1)', 2, 1, 2 / 1),
        ('int(1) / int(-1)', 1, -1, 1 / -1),
        ('int(-1) / int(1)', -1, 1, -1 / 1),
        ('int(-1) / int(-1)', -1, -1, -1 / -1),
    ])
    def test___truediv___int(self, key, arg1, arg2, arg3): self.__test___truediv__(key, arg1, arg2, arg3)

    @pytest.mark.parametrize('key, arg1, arg2, expected_exception', [
        ('int(1) / int(0)', 1, 0, ZeroDivisionError),
        ('float(1.0) / float(0.0)', 1.0, 0.0, ZeroDivisionError),
        ('np.int16(1) / np.int16(0)', np.int16(1), np.int16(0), ZeroDivisionError),
        ('np.int32(1) / np.int32(0)', np.int32(1), np.int32(0), ZeroDivisionError),
        ('np.int64(1) / np.int64(0)', np.int64(1), np.int64(0), ZeroDivisionError),
    ])
    def test___truediv___raise(self, key, arg1, arg2, expected_exception):
        with pytest.raises(expected_exception): self.__test___truediv__(key, arg1, arg2, None)


class TestDecimalNumber___floordiv__:
    """Test class for DecimalNumber.__floordiv__"""

    def __test___floordiv__(self, key, arg1, arg2, arg3): assert Dn(arg1) // Dn(arg2) == Dn(arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(1) // int(1)', 1, 1, 1 // 1),
        ('int(1) // int(2)', 1, 2, 1 // 2),
        ('int(2) // int(1)', 2, 1, 2 // 1),
        ('int(1) // int(-1)', 1, -1, 1 // -1),
        ('int(-1) // int(1)', -1, 1, -1 // 1),
        ('int(-1) // int(-1)', -1, -1, -1 // -1),
    ])
    def test___floordiv___int(self, key, arg1, arg2, arg3): self.__test___floordiv__(key, arg1, arg2, arg3)

    @pytest.mark.parametrize('key, arg1, arg2, expected_exception', [
        ('int(1) // int(0)', 1, 0, ZeroDivisionError),
        ('float(1.0) // float(0.0)', 1.0, 0.0, ZeroDivisionError),
        ('np.int16(1) // np.int16(0)', np.int16(1), np.int16(0), ZeroDivisionError),
        ('np.int32(1) // np.int32(0)', np.int32(1), np.int32(0), ZeroDivisionError),
        ('np.int64(1) // np.int64(0)', np.int64(1), np.int64(0), ZeroDivisionError),
    ])
    def test___floordiv___raise(self, key, arg1, arg2, expected_exception):
        with pytest.raises(expected_exception): self.__test___floordiv__(key, arg1, arg2, None)


class TestDecimalNumber___mod__:
    """Test class for Decimal.__mod__"""

    def __test___mod__(self, key, arg1, arg2, arg3): assert Dn(arg1) % Dn(arg2) == Dn(arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(1) % int(1)', 1, 1, 1 % 1),
        ('int(1) % int(2)', 1, 2, 1 % 2),
        ('int(2) % int(1)', 2, 1, 2 % 1),
        ('int(1) % int(-1)', 1, -1, 1 % -1),
        ('int(-1) % int(1)', -1, 1, -1 % 1),
        ('int(-1) % int(-1)', -1, -1, -1 % -1),
    ])
    def test___mod___int(self, key, arg1, arg2, arg3): self.__test___mod__(key, arg1, arg2, arg3)

    @pytest.mark.parametrize('key, arg1, arg2, expected_exception', [
        ('int(1) % int(0)', 1, 0, ZeroDivisionError),
        ('float(1.0) % float(0.0)', 1.0, 0.0, ZeroDivisionError),
        ('np.int16(1) % np.int16(0)', np.int16(1), np.int16(0), ZeroDivisionError),
        ('np.int32(1) % np.int32(0)', np.int32(1), np.int32(0), ZeroDivisionError),
        ('np.int64(1) % np.int64(0)', np.int64(1), np.int64(0), ZeroDivisionError),
    ])
    def test___mod___raise(self, key, arg1, arg2, expected_exception):
        with pytest.raises(expected_exception): self.__test___mod__(key, arg1, arg2, None)


class TestDecimalNumber___pow__:
    """Test class for DecimalNumber.__pow__"""

    def __test___pow__(self, key, arg1, arg2, arg3): assert Dn(arg1) ** Dn(arg2) == Dn(arg3)

    @pytest.mark.parametrize('key, arg1, arg2, arg3', [
        ('int(1) ** int(1)', 1, 1, 1 ** 1),
        ('int(1) ** int(2)', 1, 2, 1 ** 2),
        ('int(2) ** int(1)', 2, 1, 2 ** 1),
        ('int(1) ** int(-1)', 1, -1, 1 ** -1),
        ('int(-1) ** int(1)', -1, 1, -1 ** 1),
        ('int(-1) ** int(-1)', -1, -1, -1 ** -1),
    ])
    def test___pow___int(self, key, arg1, arg2, arg3): self.__test___pow__(key, arg1, arg2, arg3)


class TestDecimalNumber___int__:
    """Test class for DecimalNumber.__int__"""

    def __test___int__(self, key, arg1, arg2): assert int(Dn(arg1)) == arg2

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('int(1)', 1, 1),
        ('int(2)', 2, 2),
        ('int(-1)', -1, -1),
    ])
    def test___int___int(self, key, arg1, arg2): self.__test___int__(key, arg1, arg2)

    @pytest.mark.parametrize('key, arg1, arg2', [
        ('float(0)', 0.0, 0),
        ('float(1)', 1.0, 1),
        ('float(-1)', -1.0, -1),
        ('float(123)', 123.0, 123),
        ('float(-123)', -123.0, -123),
        ('float(12.3)', 12.3, 12),
        ('float(-12.3)', -12.3, -12),
        ('float(12345.67890)', 12345.67890, 12345),
        ('float(-12345.67890)', -12345.67890, -12345),
    ])
    def test___int___float(self, key, arg1, arg2): self.__test___int__(key, arg1, arg2)
